# {{ name_pascal }} Action Provider

This directory contains the **{{ name_pascal }}ActionProvider** implementation, which provides actions for {{ name }} operations.

## Overview

The {{ name_pascal }}ActionProvider is designed to {% if wallet_provider %}work with {{ wallet_provider }} for blockchain interactions{% else %}provide blockchain-agnostic operations{% endif %}. It provides a set of actions that enable [describe the main purpose/functionality].

## Directory Structure

```
{{ name }}/
├── __init__.py                    # Package exports
├── {{ name }}_action_provider.py  # Main provider implementation
├── schemas.py                     # Action schemas and types
└── README.md                      # Documentation (this file)
```

## Test Structure

```
tests/action_providers/{{ name }}/
├── __init__.py                  # Test package initialization
├── conftest.py                  # Test fixtures and configuration
├── test_action_provider.py      # Provider test suite
└── test_example_action.py       # Action-specific tests
```

## Actions

### Example Action
- `example-action`: Template action implementation
  - **Purpose**: Demonstrates the basic structure of an action
  - **Input**:
    - `field_name` (string): A descriptive name for the field (1-100 chars)
    - `amount` (string): The amount as a decimal string (e.g. "1.5")
    - `optional_field` (string, optional): Optional parameter example
  - **Output**: String describing the action result
  - **Example**:
    ```python
    result = provider.example_action({% if wallet_provider %}wallet_provider, {% endif %}{
        "field_name": "test",
        "amount": "1.0"
    })
    ```

## Implementation Details

### Network Support
{% if not protocol_family %}
This provider supports all blockchain networks.
{% elif network_ids|length == 0 %}
This provider supports all {{ protocol_family }} networks.
{% else %}
This provider supports {{ protocol_family }} networks: {% for networkId in network_ids %}{{ networkId }}{% if not loop.last %}, {% endif %}{% endfor %}.
{% endif %}

{% if wallet_provider %}
### Wallet Provider Integration
This provider is specifically designed to work with {{ wallet_provider }}. Key integration points:
- Network compatibility checks
- Transaction signing and execution
- Balance and account management
{% endif %}

## Adding New Actions

To add new actions:

1. Define the schema in `schemas.py`:
   ```python
   class NewActionSchema(BaseModel):
       # Define your action's parameters
       field_name: str = Field(...)
       amount: str = Field(...)
   ```

2. Implement the action in `{{ name }}_action_provider.py`:
   ```python
   @create_action(
       name="new_action",
       description="Description of what your action does",
       schema=NewActionSchema,
   )
   def new_action(
       self,
       {% if wallet_provider %}wallet_provider: {{ wallet_provider }},{% endif %}
       args: dict[str, Any],
   ) -> str:
       # Implement your action logic
       pass
   ```

## Testing

When implementing new actions, ensure to:
1. Add unit tests for schema validations
2. Test network support

## Notes
- Add any specific considerations for this action provider
- Document any prerequisites or setup requirements
- Include relevant external documentation links
