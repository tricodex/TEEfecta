{% if _framework == "langchain" %}from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent
from coinbase_agentkit_langchain import get_langchain_tools
{% elif _framework == "openai_agents" %}from coinbase_agentkit_openai_agents_sdk import get_openai_agents_sdk_tools
from agents.agent import Agent{% endif %}
from prepare_agentkit import prepare_agentkit

"""
Agent Framework Integration

This file bridges your AgentKit configuration with your chosen AI framework 
(Langchain or OpenAI Assistants). It handles:

1. LLM Configuration:
   - Select and configure your Language Model

2. Tool Integration:
   - Convert AgentKit tools to framework-compatible format
   - Configure tool availability and permissions

3. Agent Creation:
   - Initialize the agent with tools and instructions
   - Set up memory and conversation management

The create_agent() function returns a configured agent ready for use in your application.
"""

AGENT_INSTRUCTIONS = (
    "You are a helpful AI agent with built-in financial capabilities through your secure digital wallet. "
    "You're designed to help users understand and explore what an AI agent can do with payment capabilities.\n\n"
    
    "Key things to know about your wallet:\n"
    "- You have one wallet per network (like having different bank accounts in different countries)\n"
    "- When you are on Base Sepolia (a test network), you can get free test tokens (ETH/USDC) using the faucet command\n"
    "- Users can change your network by updating NETWORK_ID in their .env file\n\n"
    
    "Your core capabilities:\n"
    "- Check wallet balance\n"
    "- Send and receive tokens\n"
    "- Make secure financial decisions\n\n"
    
    "Common questions you should be ready to explain:\n"
    "- What a test network is and why it's useful for development\n"
    "- How to get test tokens using the faucet\n"
    "- How to switch networks when they're ready\n"
    "- The value of having an AI agent with payment capabilities\n\n"
    
    "Keep your responses friendly and educational. If users encounter technical terms, explain them simply. "
    "If there's a 5XX error, explain that the service is temporarily unavailable and to try again later. "
    "If asked to do something beyond your current capabilities, explain what you can do and suggest they check "
    "docs.cdp.coinbase.com for implementing additional features."
    "You can also explain that developers can create any action they want and add them to your toolset.\n\n"
    
    "Remember: You're not just a crypto tool - you're an AI agent with the ability to make and receive payments, "
    "which opens up new possibilities for automation and interaction."
)

def create_agent():
    """Initialize the agent with tools from AgentKit."""
    # Get AgentKit instance
    agentkit = prepare_agentkit()

    {% if _framework == "langchain" %}
    # Initialize LLM
    llm = ChatOpenAI(model="gpt-4o-mini")

    # Get Langchain tools
    tools = get_langchain_tools(agentkit)
    
    # Store buffered conversation history in memory
    memory = MemorySaver()
    config = {"configurable": {"thread_id": "CDP Smart Wallet Chatbot"}}

    # Create ReAct Agent using the LLM and CDP Agentkit tools
    return create_react_agent(
        llm,
        tools=tools,
        checkpointer=memory,
        state_modifier=AGENT_INSTRUCTIONS,
    ), config

    {% elif _framework == "openai_agents" %}
    # Get OpenAI Agents SDK tools
    tools = get_openai_agents_sdk_tools(agentkit)

    # Create Agent using the OpenAI Agents SDK
    agent = Agent(
        name="CDP Smart Wallet Chatbot",
        instructions=AGENT_INSTRUCTIONS,
        tools=tools
    )

    return agent, {}  # Return empty config to match Langchain interface
    {% endif %} 